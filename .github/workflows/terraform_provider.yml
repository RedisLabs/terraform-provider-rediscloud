name: Terraform Provider Checks

on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
      - develop
    paths-ignore:
      - '**.md'
env:
  TERRAFORM_VERSION: "1.2.6"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  go_build:
    name: go build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: actions/cache@v3.3.2
        continue-on-error: true
        id: cache-terraform-plugin-dir
        timeout-minutes: 2
        with:
          path: terraform-plugin-dir
          key: ${{ runner.os }}-terraform-plugin-dir-${{ hashFiles('go.sum') }}-${{ hashFiles('provider/**') }}
      - if: steps.cache-terraform-plugin-dir.outputs.cache-hit != 'true' || steps.cache-terraform-plugin-dir.outcome == 'failure'
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
      - if: steps.cache-terraform-plugin-dir.outputs.cache-hit != 'true' || steps.cache-terraform-plugin-dir.outcome == 'failure'
        name: go mod download
        run: go mod download
      - if: steps.cache-terraform-plugin-dir.outputs.cache-hit != 'true' || steps.cache-terraform-plugin-dir.outcome == 'failure'
        name: go build
        run: go build -o terraform-plugin-dir/registry.terraform.io/RedisLabs/rediscloud/99.99.99/$(go env GOOS)_$(go env GOARCH)/terraform-provider-rediscloud .

  terraform_providers_schema:
    name: terraform providers schema
    needs: [go_build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: actions/cache@v3.3.2
        continue-on-error: true
        id: cache-terraform-providers-schema
        timeout-minutes: 2
        with:
          path: terraform-providers-schema
          key: ${{ runner.os }}-terraform-providers-schema-${{ hashFiles('go.sum') }}-${{ hashFiles('provider/**') }}
      - if: steps.cache-terraform-providers-schema.outputs.cache-hit != 'true' || steps.cache-terraform-providers-schema.outcome == 'failure'
        uses: actions/cache@v3.3.2
        timeout-minutes: 2
        with:
          path: terraform-plugin-dir
          key: ${{ runner.os }}-terraform-plugin-dir-${{ hashFiles('go.sum') }}-${{ hashFiles('provider/**') }}
      - if: steps.cache-terraform-providers-schema.outputs.cache-hit != 'true' || steps.cache-terraform-providers-schema.outcome == 'failure'
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false
      - if: steps.cache-terraform-providers-schema.outputs.cache-hit != 'true' || steps.cache-terraform-providers-schema.outcome == 'failure'
        name: terraform init
        run: |
          # We need a file to initialize the provider
          cat <<EOT >> providers.tf
          terraform {
            required_providers {
              rediscloud = {
                source  = "RedisLabs/rediscloud"
                version = "99.99.99"
              }
            }
          }
          EOT
          echo 'resource "rediscloud_subscription" "example" {}' > example.tf
          terraform init -plugin-dir terraform-plugin-dir
      - if: steps.cache-terraform-providers-schema.outputs.cache-hit != 'true' || steps.cache-terraform-providers-schema.outcome == 'failure'
        name: terraform providers schema
        run: |
          mkdir terraform-providers-schema
          terraform providers schema -json > terraform-providers-schema/schema.json

  go_test:
    name: go test
    needs: [go_build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
      - uses: dorny/paths-filter@v2.11.1
        id: filter
        with:
          filters: |
            code-changes:
              - 'go.mod'
              - 'go.sum'
              - 'provider/**'
              - '*.go'
              - '.github/workflows/**'
      - run: make testacc
        if: steps.filter.outputs.code-changes == 'true'
        env:
          REDISCLOUD_ACCESS_KEY: ${{ secrets.REDISCLOUD_ACCESS_KEY_STAGING }}
          REDISCLOUD_SECRET_KEY: ${{ secrets.REDISCLOUD_SECRET_KEY_STAGING }}
          REDISCLOUD_URL: ${{ secrets.REDISCLOUD_URL_STAGING }}
          AWS_TEST_CLOUD_ACCOUNT_NAME: "${{ secrets.AWS_TEST_CLOUD_ACCOUNT_NAME_STAGING }}"
          AWS_PEERING_REGION: ${{ secrets.AWS_PEERING_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_VPC_CIDR: ${{ secrets.AWS_VPC_CIDR }}
          AWS_VPC_ID: ${{ secrets.AWS_VPC_ID }}
          AWS_TEST_TGW_ID: ${{ secrets.AWS_TEST_TGW_ID_STAGING }}
          TF_ACC: true
          TF_LOG: debug
          AWS_ACCESS_KEY_ID: ${{ secrets.CLOUD_ACCOUNT_KEY }}
          AWS_ACCESS_SECRET_KEY: ${{ secrets.CLOUD_ACCOUNT_SECRET }}
          AWS_CONSOLE_USERNAME: ${{ secrets.CLOUD_ACCOUNT_USERNAME }}
          AWS_CONSOLE_PASSWORD: ${{ secrets.CLOUD_ACCOUNT_PASS }}
          AWS_SIGNIN_URL: ${{ secrets.CLOUD_ACCOUNT_URL }}
          GCP_VPC_PROJECT: ${{ secrets.GCP_VPC_PROJECT }}
          GCP_VPC_ID: ${{ secrets.GCP_VPC_ID }}
      - name: Generate code coverage report
        if: steps.filter.outputs.code-changes == 'true' && (success() || failure())
        run: make generate_coverage
      - name: Upload code coverage report
        if: steps.filter.outputs.code-changes == 'true' && (success() || failure())
        uses: actions/upload-artifact@v3
        with:
          name: coverage.html
          path: bin/coverage.html

  tfproviderlint:
    name: tfproviderlint
    needs: [go_build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
      - run: make tfproviderlint

